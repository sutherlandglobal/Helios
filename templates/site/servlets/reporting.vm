#set( $fullPackageName = $SITE_CLASS_PREFIX + ".api")

package $fullPackageName;

import com.sutherland.helios.api.format.output.ChartFormatter;
import com.sutherland.helios.api.format.output.CSVFormatter;
import com.sutherland.helios.api.format.output.HTMLFormatter;
import com.sutherland.helios.api.format.output.JSONFormatter;
import com.sutherland.helios.api.format.output.ResultsFormatter;
import com.sutherland.helios.api.format.output.XMLFormatter;
import com.sutherland.helios.api.report.ReportProcessor;
import com.sutherland.helios.api.report.frontend.ReportFrontEnds;
import com.sutherland.helios.exceptions.ExceptionFormatter;
import com.sutherland.helios.logging.LogIDFactory;
import com.sutherland.helios.report.Report;
import com.sutherland.helios.report.ReportTypes;
import com.sutherland.helios.report.parameters.ParameterInfo;
import com.sutherland.helios.report.parameters.ReportParameters;
import com.sutherland.helios.report.parameters.parameter.Parameter;
import com.sutherland.helios.report.parameters.sanitize.StringSanitizer;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.MDC;
import org.jfree.chart.JFreeChart;

/**
 * @author Jason Diamond
 *
 */
public class Reporting extends HttpServlet 
{	
	private static final long serialVersionUID = $math.random(1,99999999)L;
	private final static Logger logger = Logger.getLogger(Reporting.class);
	private final static String LOG_ID_PREFIX = "$API_LOGGER_HANDLE=";

	private Reporting(){}
	
	@SuppressWarnings("unchecked")
	public void doGet(HttpServletRequest request, HttpServletResponse response)
	{
		//build an api logger to log stuff pulled from reportprocessor
		String logID = LogIDFactory.getLogID().toString();

		if (MDC.get(LOG_ID_PREFIX ) == null) 
		{
			MDC.put(LOG_ID_PREFIX, LOG_ID_PREFIX + logID);
		}
		
		String fullRequestURL = request.getRequestURL().toString();
		String queryString = request.getQueryString();
		
		if(queryString != null)
		{
			fullRequestURL += "?" + queryString;
		}
		
		logger.log(Level.INFO, "Report request: " + fullRequestURL + " made by " + request.getRemoteUser() + " from " + request.getHeader("X-Forwarded-For") + " originating from " + request.getHeader("referer"));
		
		response.setCharacterEncoding("UTF-8");
		
		ReportProcessor reportProcessor = new ReportProcessor();

		reportProcessor.addJar("$SITE_JAR");

		String reportName = null;

		ReportParameters reportParameters = new ReportParameters();

		reportParameters.addSupportedParameter(ParameterInfo.START_DATE_PARAM);
		reportParameters.addSupportedParameter(ParameterInfo.END_DATE_PARAM);
		reportParameters.addSupportedParameter(ParameterInfo.AGENT_NAMES_PARAM);
		reportParameters.addSupportedParameter(ParameterInfo.TEAM_NAMES_PARAM);
		reportParameters.addSupportedParameter(ParameterInfo.USER_GRAIN_PARAM);
		reportParameters.addSupportedParameter(ParameterInfo.TIME_GRAIN_PARAM);
		reportParameters.addSupportedParameter(ParameterInfo.NUM_DRIVERS_PARAM);
		reportParameters.addSupportedParameter(ParameterInfo.REPORT_TYPE_PARAM);
		reportParameters.addSupportedParameter(ParameterInfo.SOURCE_PARAM);
		reportParameters.addSupportedParameter(ParameterInfo.DATE_FORMAT_PARAM);

		ArrayList<String> apiParamNames = new ArrayList<String>();
		apiParamNames.add("reportName");
		apiParamNames.add("format");
		apiParamNames.add("delimiter");
		apiParamNames.add("enquote");
		apiParamNames.add("autoRefresh");
		apiParamNames.add("enableHeaders");

		ServletOutputStream out = null;
		PrintWriter writer = null;
		HashMap<String,String> requestParameters = new HashMap<String, String>();
		
		Report report = null;
		try
		{	
			long loadSiteStartTime = System.currentTimeMillis();
			reportProcessor.loadReportEntities();
			long loadSiteEndTime = System.currentTimeMillis();
			logger.log(Level.INFO, "Loaded Report Objects in: " +  (loadSiteEndTime - loadSiteStartTime) + " ms");

			String paramName;

			for (Map.Entry<String, String[]> requestParam : ((Map<String, String[]>)request.getParameterMap()).entrySet())
			{
				//skip the value cleaning for now, otherwise null becomes a string containing "null"
				paramName = requestParam.getKey();

				//param values can branch out multiple reports 
				//if there are multiple reports, only run the metric reports
				//max branches?

				for(String value : requestParam.getValue())
				{
					if(apiParamNames.contains(paramName))
					{
						requestParameters.put(paramName, value);
					}
					else
					{
						reportParameters.addParameter(paramName, value);
					}
				}
			}

			//log report name and parameters, both api and report
			//maybe ip address et al.

			reportName = requestParameters.get(ParameterInfo.REPORT_NAME_HTTP_PARAM_NAME);
			logger.log(Level.INFO, "Building report: " + reportName);

			//tell site logs where we're coming from
			reportParameters.addParameter(ParameterInfo.SOURCE_PARAM, "API");

			long reportStartTime = System.currentTimeMillis();


			report = reportProcessor.startReport("$REPORT_CLASS_PREFIX" + "." + reportName, reportParameters);

			long reportEndTime = System.currentTimeMillis();
			logger.log(Level.INFO, "Executed report in: " +  (reportEndTime - reportStartTime) + " ms");
			logger.log(Level.INFO, "Report returned rows: " + report.getDataSize());
			
			int reportFormat = Integer.parseInt(requestParameters.get("format"));

			ResultsFormatter formatter;
			writer = response.getWriter();
			
			switch(reportFormat)
			{
			case ReportFrontEnds.XML:
				formatter = new XMLFormatter();
				response.setContentType("text/xml");
				response.setHeader("Content-type","application/xhtml+xml");
				
				writer.println(formatter.formatResults(report));
				
				break;
			case ReportFrontEnds.HTML:
				formatter = new HTMLFormatter();

				String autoRefreshParam = requestParameters.get("autoRefresh");
				
				if(autoRefreshParam != null  )
				{
					formatter.setAutoRefresh("1".equals(StringSanitizer.sanitize(autoRefreshParam, Parameter.MAX_NAME_LEN)));
				}
				
				response.setContentType("text/html");

				writer.println(formatter.formatResults(report));

				//add html footer
				break;
			case ReportFrontEnds.JSON:
				formatter = new JSONFormatter();

				response.setContentType("application/json");

				writer.println(formatter.formatResults(report));
				break;
			case ReportFrontEnds.CHART:
				formatter = new ChartFormatter();

				response.setContentType("text/html");
				
				writer.println(formatter.formatResults(report));

				break;
			case ReportFrontEnds.EXCEL:
				writer = response.getWriter();
				formatter = new CSVFormatter();

				formatter.setEnquote(true);
				
				String excelEnableHeadersParam = requestParameters.get("enableHeaders");
			
				if(excelEnableHeadersParam != null  )
				{
					formatter.enableHeaders("1".equals(StringSanitizer.sanitize(excelEnableHeadersParam, Parameter.MAX_NAME_LEN)));
				}

    			response.setHeader("Content-disposition", "attachment; filename=\"" + reportName +".csv\"");
				
				response.setContentType("text/csv");

				writer.println(formatter.formatResults(report));
				
				break;
			case ReportFrontEnds.CSV:
			default:
				writer = response.getWriter();
				formatter = new CSVFormatter();

				String csvEnquoteParam = requestParameters.get("enquote");
				String csvDelimParam = requestParameters.get("delimiter");
				String CSVEnableHeadersParam = requestParameters.get("enableHeaders");

				if(csvEnquoteParam != null  )
				{
					formatter.setEnquote("1".equals(StringSanitizer.sanitize(csvEnquoteParam, Parameter.MAX_NAME_LEN)));
				}

				if(csvDelimParam != null  )
				{
					formatter.setDelimiter(StringSanitizer.sanitize(csvDelimParam, Parameter.MAX_NAME_LEN));
				}
				
				if(CSVEnableHeadersParam != null  )
				{
					formatter.enableHeaders("1".equals(StringSanitizer.sanitize(CSVEnableHeadersParam, Parameter.MAX_NAME_LEN)));
				}
																
				response.setContentType("text/plain");

				writer.println(formatter.formatResults(report));
				break;
			}
		}
		catch (Exception t)
		{
			try 
			{
				//simple message for the user
				//get error message from reportprocessor
				logger.log(Level.ERROR, ExceptionFormatter.asString(t));
				
				String errorMessage = reportProcessor.getErrorMessage();
				
				if(errorMessage == null || errorMessage.equals(""))
				{
					out.println("Error: " + t.getMessage());
				}
			} 
			catch (IOException e) 
			{
				logger.log(Level.ERROR, ExceptionFormatter.asString(e));
			}
			finally
			{
				if(out != null)
				{
					try 
					{
						out.close();
					} 
					catch (IOException e) 
					{
						logger.log(Level.ERROR, ExceptionFormatter.asString(e));
					}
				}
			}
		}
		finally
		{
			if(out != null)
			{
				try 
				{
					out.close();
				} 
				catch (IOException e) 
				{
					logger.log(Level.ERROR, ExceptionFormatter.asString(e));
				}
			}
			
			if(logID != null)
			{
				MDC.remove(LOG_ID_PREFIX);
			}
		}
	}
}
