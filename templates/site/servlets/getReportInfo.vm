#set( $fullPackageName = $SITE_CLASS_PREFIX + ".api")

package $fullPackageName;

import com.sutherland.helios.api.report.ReportProcessor;
import com.sutherland.helios.exceptions.ReportSetupException;
import com.sutherland.helios.report.ReportTypes;
import com.sutherland.helios.report.parameters.ParameterInfo;
import com.sutherland.helios.report.parameters.parameter.Parameter;
import com.sutherland.helios.report.parameters.sanitize.StringSanitizer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.lang.reflect.Type;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedHashMap;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * @author $AUTHOR
 *
 */
public class GetReportInfo extends HttpServlet 
{
	private static final long serialVersionUID = $math.random(1,99999999)L;

	private GetReportInfo() 
	{}
	
	public void doGet(HttpServletRequest request, HttpServletResponse response)
	{
		String reportClassParameter = null;
		String reportClassName = null;
		PrintWriter out = null;
		
		ReportProcessor reportProcessor = null;
		try
		{	
			if(request.getParameter(ParameterInfo.REPORT_NAME_HTTP_PARAM_NAME) != null)
			{
				reportClassParameter = StringSanitizer.sanitize(request.getParameter(ParameterInfo.REPORT_NAME_HTTP_PARAM_NAME), Parameter.MAX_NAME_LEN);
				reportClassName = "$REPORT_CLASS_PREFIX" + "." + reportClassParameter;
				
				reportProcessor = new ReportProcessor();
				reportProcessor.addJar("$SITE_JAR");
				reportProcessor.loadReportEntity(reportClassName);
				
				if( reportProcessor.isValidReportClassName(reportClassName))
				{
					GsonBuilder builder = new GsonBuilder();
			        Gson gson = builder.create();
			        gson = builder.enableComplexMapKeySerialization().create();
			        
			        LinkedHashMap<String, String> reportInfo = new LinkedHashMap<String, String>();
			        LinkedHashMap<String, ArrayList<String>> reportParameters = reportProcessor.getUIReportParameters(reportClassName);
			        LinkedHashMap<String, String> reportTypes = new LinkedHashMap<String, String>();
			        
			        //basic info like name/desc
					String basicInfo = gson.toJson( reportProcessor.getReportInfo(reportClassName) );
					reportInfo.put("basicInfo", basicInfo);
					
					//report type information
					Type type = null;
					//type = new TypeToken<LinkedHashMap<String,String>>(){}.getType();
					
					for(String reportType : reportParameters.keySet())
					{
						reportTypes.put(reportType, ReportTypes.TYPE_LOOKUP.get(reportType));
					}
					
					reportInfo.put("reportTypes", gson.toJson(reportTypes));
					
			        //this report's parameters by type
			        type = new TypeToken<LinkedHashMap<String,ArrayList<String>>>(){}.getType();
					String paramInfo = gson.toJson(reportParameters, type );
					reportInfo.put("paramInfo", paramInfo);
					
					//this report's supported formats
					type = new TypeToken<LinkedHashMap<String,String>>(){}.getType();
					String frontEnds = gson.toJson(reportProcessor.getUISupportedReportFrontEnds(reportClassName), type);
					reportInfo.put("frontEnds", frontEnds);
										
					out = response.getWriter();
					out.println(gson.toJson(reportInfo).replace("\\", "").replace("\"{", "{").replace("}\"", "}").replace("\"[", "[").replace("]\"", "]") );
				}
				else
				{
					throw new ReportSetupException("Invalid report selected");
				}
			}
		}
		catch (Exception t)
		{
			t.printStackTrace();
				
			//simple message for the user
			try 
			{
				if(out == null)
				{
					out = response.getWriter();
				}
				
				out.println("Error: " + t.getMessage());
			} 
			catch (IOException e) 
			{
				e.printStackTrace();
			}
			finally
			{
				if(out != null)
				{
					out.close();
				}
			}
		}
		finally
		{
			if(out != null)
			{
				out.close();
			}
		}
	}
}
